import java.util.*;
import java.util.Map;

import processing.core.*;
import de.fhpotsdam.unfolding.UnfoldingMap;
import de.fhpotsdam.unfolding.core.Coordinate;
import de.fhpotsdam.unfolding.data.Feature;
import de.fhpotsdam.unfolding.data.GeoJSONReader;
import de.fhpotsdam.unfolding.marker.Marker;
import de.fhpotsdam.unfolding.providers.Google;
import de.fhpotsdam.unfolding.providers.Microsoft;
import de.fhpotsdam.unfolding.utils.MapUtils;
//shows a colored map based on the life expectancy of countries
public class LifeExpectancy extends PApplet{
	UnfoldingMap map;
	
	Map<String,Float> lifeExpByCountry;
	List<Feature> countries;
	List<Marker> countryMarkers;
	
	public void setup(){
		size(800,600,OPENGL);
		lifeExpByCountry = loadLifeExpectancyFromCSV("LifeExpectancyWorldBankModule3.csv");
		map = new UnfoldingMap(this,50,50,800,600,new Microsoft.HybridProvider());
		MapUtils.createDefaultEventDispatcher(this, map);//event handler
		
		countries = GeoJSONReader.loadData(this, "countries.geo.json");
		countryMarkers = MapUtils.createSimpleMarkers(countries);
		
		map.addMarkers(countryMarkers);
		shadeCountries();
	}
	public void draw(){
		map.draw();
	}
  //loads life expectancy data from csv file to lifeExpByCountry Map
	private Map<String,Float> loadLifeExpectancyFromCSV(String fileName){
		Map<String,Float> lifeExpMap = new HashMap<String,Float>();
		String[] rows = loadStrings(fileName);
		
		for(String row: rows){
			String[] columns = row.split(",");

			if(columns.length == 6 && !columns[5].equals("..")){//checks if it is a country code
				float value = Float.parseFloat(columns[5]);
				lifeExpMap.put(columns[4], value);
			}
		}
		return lifeExpMap;
	}
  //colors map based on life expectancy data, grey if no data
	private void shadeCountries(){
		for(Marker marker: countryMarkers){
			String countryId = marker.getId();
			
			if(lifeExpByCountry.containsKey(countryId)){//checks value for life expectancy of countries
				float lifeExp = lifeExpByCountry.get(countryId);
				int colorLevel = (int)map(lifeExp,40,90,10,255);//takes number in range(40,90(ages)),to new range(10,255(RGB code))
				marker.setColor(color(255-colorLevel,100,colorLevel));
			} else {
				marker.setColor(color(150,150,150));//for countries that doesn't have data it is grey
			}
		}
	}
}
